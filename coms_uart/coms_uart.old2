procedure Coms_Uart is
   Tx_Buffer : constant UART_Data_8b := 
     (Character'Pos('H'), Character'Pos('e'), ...); -- etc.

   USART1_TX : constant GPIO_Point := PA9;
   USART1_RX : constant GPIO_Point := PA10;

   procedure Configure_System_Clock_HSI_16MHz is
   begin
      RCC_Periph.CR.HSION := True;
      loop
         exit when RCC_Periph.CR.HSIRDY;
      end loop;

      RCC_Periph.CFGR.SW := 0;
      loop
         exit when RCC_Periph.CFGR.SWS = 0;
      end loop;

      RCC_Periph.CFGR.HPRE              := 0;
      RCC_Periph.CFGR.PPRE.Arr (1)      := 0;
      RCC_Periph.CFGR.PPRE.Arr (2)      := 0;
   end Configure_System_Clock_HSI_16MHz;

begin
   -- (Optional) If your runtime hasn't done Systick initialization.
   -- HAL.Initialize;

   -- **Configure the main system clock** to match your C code
   Configure_System_Clock_HSI_16MHz;

   -- Now that the system is at 16 MHz HSI, you can enable the GPIO & USART
   Enable_Clock (GPIO_A);
   Enable_Clock (USART_1);

   Configure_IO (USART1_TX,
                 (Mode           => Mode_AF,
                  AF             => GPIO_AF_USART1_7,
                  Resistors      => Floating,
                  AF_Output_Type => Push_Pull,
                  AF_Speed       => Speed_50MHz));

   Configure_IO (USART1_RX,
                 (Mode           => Mode_AF,
                  AF             => GPIO_AF_USART1_7,
                  Resistors      => Floating,
                  AF_Output_Type => Push_Pull,
                  AF_Speed       => Speed_50MHz));

   USART_1.Set_Baud_Rate         (115_200);
   USART_1.Set_Word_Length       (Word_Length_8);
   USART_1.Set_Stop_Bits         (Stopbits_1);
   USART_1.Set_Parity            (No_Parity);
   USART_1.Set_Mode              (Tx_Rx_Mode);
   USART_1.Set_Flow_Control      (No_Flow_Control);
   USART_1.Set_Oversampling_Mode (Oversampling_By_16);
   USART_1.Enable;

   while True loop
      declare
         Status : UART_Status;
      begin
         USART_1.Transmit (Tx_Buffer, Status, Timeout => 1000);
      end;

      delay 1.0;  -- 1 second
   end loop;
end Coms_Uart;
